/**
 * @file
 * @brief Random distributions, copied from
 * @copyright Copyright (c) 2007-2018 Free Software Foundation, Inc.
 *
 * This file is part of the GNU ISO C++ Library.  This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3, or (at
 * your option) any later version.
 */

#ifndef ALLPIX_RANDOM_DISTRIBUTIONS_H
#define ALLPIX_RANDOM_DISTRIBUTIONS_H

#include <limits>
#include <ostream>
#include <random>

namespace allpix {
    /*
     * An adaptor class for converting the output of any Generator into
     * the input for a specific Distribution.
     */
    template <typename _Engine, typename _DInputType> struct distributionAdaptor {
        static_assert(std::is_floating_point<_DInputType>::value, "template argument must be a floating point type");

    public:
        explicit distributionAdaptor(_Engine& __g) : _M_g(__g) {}

        _DInputType min() const { return _DInputType(0); }

        _DInputType max() const { return _DInputType(1); }

        /*
         * Converts a value generated by the adapted random number generator
         * into a value in the input domain for the dependent random number
         * distribution.
         */
        _DInputType operator()() {
            return std::generate_canonical<_DInputType, std::numeric_limits<_DInputType>::digits, _Engine>(_M_g);
        }

    private:
        _Engine& _M_g;
    };

    /**
     * @brief A normal continuous distribution for random numbers.
     *
     * The formula for the normal probability density function is
     * @f[
     *     p(x|\mu,\sigma) = \frac{1}{\sigma \sqrt{2 \pi}}
     *            e^{- \frac{{x - \mu}^ {2}}{2 \sigma ^ {2}} }
     * @f]
     */
    template <typename T = double> class normal_distribution {
        static_assert(std::is_floating_point<T>::value, "result_type must be a floating point type");

    public:
        /** The type of the range of the distribution. */
        typedef T result_type;

        /** Parameter type. */
        struct param_type {
            explicit param_type(T mean = T(0), T stddev = T(1)) : mean_(mean), stddev_(stddev) { assert(stddev_ > T(0)); }

            T mean() const { return mean_; }

            T stddev() const { return stddev_; }

            friend bool operator==(const param_type& p1, const param_type& p2) {
                return (p1.mean_ == p2.mean_ && p1.stddev_ == p2.stddev_);
            }

            friend bool operator!=(const param_type& p1, const param_type& p2) { return !(p1 == p2); }

        private:
            T mean_;
            T stddev_;
        };

    public:
        /**
         * Constructs a normal distribution with parameters @f$mean@f$ and
         * standard deviation.
         */
        explicit normal_distribution(result_type mean = result_type(0), result_type stddev = result_type(1))
            : param_(mean, stddev), saved_available_(false) {}

        explicit normal_distribution(const param_type& __p) : param_(__p), saved_available_(false) {}

        /**
         * @brief Resets the distribution state.
         */
        void reset() { saved_available_ = false; }

        /**
         * @brief Returns the mean of the distribution.
         */
        T mean() const { return param_.mean(); }

        /**
         * @brief Returns the standard deviation of the distribution.
         */
        T stddev() const { return param_.stddev(); }

        /**
         * @brief Returns the parameter set of the distribution.
         */
        param_type param() const { return param_; }

        /**
         * @brief Sets the parameter set of the distribution.
         * @param param The new parameter set of the distribution.
         */
        void param(const param_type& param) { param_ = param; }

        /**
         * @brief Returns the greatest lower bound value of the distribution.
         */
        result_type min() const { return std::numeric_limits<result_type>::lowest(); }

        /**
         * @brief Returns the least upper bound value of the distribution.
         */
        result_type max() const { return std::numeric_limits<result_type>::max(); }

        /**
         * @brief Generating functions.
         */
        template <typename RNG> result_type operator()(RNG& rng) { return this->operator()(rng, param_); }

        template <typename RNG> result_type operator()(RNG& rng, const param_type& __p);

    private:
        param_type param_;
        result_type saved_{};
        bool saved_available_{};
    };
} // namespace allpix

// Include template definitions
#include "distributions.tpp"

#endif // ALLPIX_RANDOM_DISTRIBUTIONS_H
